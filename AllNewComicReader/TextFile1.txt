using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using SevenZip;
using System.Windows.Forms;

namespace AllNewComicReader
{
    class Compression
    {
        LinkedList<ImageMagick.MagickImage> ArchiveFiles;
        SevenZipExtractor extractor;
        SevenZipExtractor Streamedextractor;
        MemoryStream ms;
        MemoryStream ms2;

        Dictionary<int, string> ArchiveSort;

        MemoryStream Extracted;
        FileStream fs;
        public int filecount;
        public int CurrentPosition;
        public int iCurrentPage;

        public Compression(string filename)
        {
            CheckifSupported("blabla.jpg");
            ArchiveSort = new Dictionary<int, string>();
            Initalise7zip();
            CurrentPosition = 1;
            iCurrentPage = 0;
            ms = new MemoryStream();
            ms2 = new MemoryStream();
            fs = new FileStream(filename, FileMode.Open);
            fs.CopyTo(ms);
            fs.Seek(0, SeekOrigin.Begin);
            fs.CopyTo(ms2);
            fs.Close();
            //ms2 = new MemoryStream(ms.ToArray());
            extractor = new SevenZipExtractor(ms);
            Streamedextractor = new SevenZipExtractor(ms2);
            
            Streamedextractor.ExtractionFinished += new EventHandler<EventArgs>(Streamedextractor_FileExtractionFinished);
            ArchiveFiles = new LinkedList<ImageMagick.MagickImage>();
            SortArchive();

            ExtractArchive();
        }

        public void SortArchive()
        {
            LinkedList<string> names = new LinkedList<string>();
            for(int i = 0; i < extractor.FilesCount; i++)
            {
                if(CheckifSupported(extractor.ArchiveFileNames[i]))
                names.AddLast(extractor.ArchiveFileNames[i]);
            }

            filecount = names.Count;
            int currentpos = 0;

            while(names.Count > 0)
            {
                
                int position = 0;

                for(int i = 0; i < names.Count; i++)
                {
                    if(string.Compare(names.ElementAt<string>(position),names.ElementAt<string>(i)) == 1)
                    {
                        position = i;
                    }
                }

                ArchiveSort.Add(currentpos, names.ElementAt<string>(position));
                names.Remove(names.ElementAt<string>(position));
                currentpos++;
            }

          
        }
        public void Initalise7zip()
        {
            string ProgramPath = Path.GetDirectoryName(Application.ExecutablePath);

            if (IntPtr.Size == 8) //x64
                SevenZip.SevenZipExtractor.SetLibraryPath(ProgramPath + @"/7z64.dll");
            else //x86
                SevenZip.SevenZipExtractor.SetLibraryPath(ProgramPath + @"/7z.dll");
        }

        public MemoryStream ExtractFile()
        {
            MemoryStream newfs = new MemoryStream();
            extractor.ExtractFile(ArchiveSort[0], newfs);

            return newfs;
        }

        

        public void ExtractArchive()
        {
            Extracted = new MemoryStream();
            //Extracted.Seek(0, SeekOrigin.Begin);
            ms2.Seek(0, SeekOrigin.Begin);
            Streamedextractor = new SevenZipExtractor(ms2);
            Streamedextractor.ExtractionFinished += new EventHandler<EventArgs>(Streamedextractor_FileExtractionFinished);
            Streamedextractor.BeginExtractFile(ArchiveSort[CurrentPosition], Extracted);

        }

        public void Streamedextractor_FileExtractionFinished(object sender, EventArgs e)
        {
            ImageMagick.MagickImage newImage = new ImageMagick.MagickImage(Extracted.ToArray());
            ArchiveFiles.AddLast(newImage);

            if(CurrentPosition <= filecount - 1)
            ExtractArchive();

            CurrentPosition++;
            
            
        }



        public ImageMagick.MagickImage ExtractNextFile()
        {
            //MemoryStream newfs = new MemoryStream();
            //extractor.ExtractFile(1, newfs);
            iCurrentPage++;

            return ArchiveFiles.ElementAt<ImageMagick.MagickImage>(iCurrentPage);
        }

        public bool CheckifSupported(string filename)
        {


            bool bSupported = false;

            string fileformat = Path.GetExtension(filename).ToLower();
             foreach (ImageMagick.MagickFormat format in Enum.GetValues(typeof(ImageMagick.MagickFormat)))
             {
                 if ("." + format.ToString().ToLower() == fileformat)
                bSupported = true;
             }

             return bSupported;
    
        }
    }
}
